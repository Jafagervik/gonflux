@import "std"
@import "concurrency"

fun do_op() : str -> 
    x = "Hello"

    // String concatination
    return x ++ " World\n"
end


proc main() -> 
    a = spawn(do_op)
    b = spawn(do_op)
    c = spawn(do_op)

    // d returns a pid, but won't return 
    // until it has been called with params 
    d = spawn(\x:i32, y: i32 -> x + y)

    // Potentially add a waitforall 
    waitfor(a, b, c, d(2,3))

    // send(to, opts)
    // recv(from, opts)

    // Add atomics later on?

    print("{}, PID: {}\n", {a, pid(a)})
    print("{}, PID: {}\n", {b, pid(b)})
    print("{}, PID: {}\n", {c, pid(c)})
    print("{}, PID: {}\n", {d, pid(d)})
end

main()
